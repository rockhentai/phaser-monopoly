---
description: 游戏开发清单
globs: 
alwaysApply: false
---
# 大富翁游戏开发清单

## 🎯 项目规划阶段

### 需求分析
- [ ] 确定目标平台（PC/移动端/网页/桌游）
- [ ] 定义目标用户群体
- [ ] 确定游戏核心玩法和特色功能
- [ ] 制定项目时间线和里程碑
- [ ] 确定预算和资源分配

### 技术选型
- [x] 开发框架：Phaser.js 3.x
- [x] 构建工具：Vite
- [x] 编程语言：TypeScript
- [ ] 状态管理：Zustand/Redux Toolkit（可选）
- [ ] 数据持久化：LocalStorage/IndexedDB
- [ ] 网络通信：Socket.io/WebRTC（多人模式）
- [ ] 音频处理：Phaser内置音频系统

## 🎨 美术设计阶段

### 视觉风格设计
- [ ] 确定整体美术风格（卡通/写实/像素等）
- [ ] 设计色彩方案
- [ ] 制作概念图和情绪板
- [ ] 设计UI/UX风格指南

### 棋盘设计
- [ ] 设计棋盘整体布局
- [ ] 绘制40个格子的详细设计
- [ ] 设计起点、监狱、停车场等特殊区域
- [ ] 制作棋盘背景和装饰元素
- [ ] 设计地产分组的视觉标识

### 角色与道具设计
- [ ] 设计玩家角色/代币
- [ ] 设计房屋和酒店模型
- [ ] 设计骰子动画效果
- [ ] 制作各种卡片（地产卡、机会卡、命运卡）
- [ ] 设计货币和计分界面

### UI界面设计
- [ ] 主菜单界面
- [ ] 游戏房间创建/加入界面
- [ ] 游戏主界面布局
- [ ] 玩家信息面板
- [ ] 交易界面
- [ ] 设置和暂停菜单

## 🛠 Phaser.js 项目设置

### 项目初始化
- [x] 创建Vite + TypeScript项目
- [x] 安装Phaser.js依赖 (`npm install phaser`)
- [x] 配置TypeScript类型定义
- [x] 设置Vite配置文件（资源处理、热重载）
- [x] 创建基础项目结构

### 项目结构设计
```
src/
├── scenes/           # Phaser场景
│   ├── PreloadScene.ts
│   ├── MenuScene.ts
│   ├── GameScene.ts
│   └── UIScene.ts
├── objects/          # 游戏对象类
│   ├── Board.ts
│   ├── Player.ts
│   ├── Property.ts
│   └── Dice.ts
├── managers/         # 管理器类
│   ├── GameManager.ts
│   ├── UIManager.ts
│   └── SoundManager.ts
├── data/            # 游戏数据
│   ├── boardData.ts
│   ├── propertyData.ts
│   └── cardData.ts
├── types/           # TypeScript类型定义
├── utils/           # 工具函数
└── assets/          # 资源文件
```

### 开发环境配置
- [x] 配置ESLint和Prettier
- [x] 设置调试工具
- [x] 配置资源加载路径
- [x] 设置开发服务器

## 🔧 Phaser.js 核心系统开发

### Scene管理
- [ ] PreloadScene：资源预加载
- [ ] MenuScene：主菜单
- [ ] GameScene：游戏主场景
- [ ] UIScene：UI叠加层
- [ ] 场景切换逻辑

### 游戏对象类设计
- [ ] Board类：棋盘渲染和交互
- [ ] Player类：玩家角色和移动
- [ ] Property类：地产管理
- [ ] Dice类：骰子动画和逻辑
- [ ] Card类：卡片系统
- [ ] Building类：房屋和酒店

### 资源管理
- [ ] 图片资源加载器
- [ ] 音频资源管理
- [ ] 字体加载
- [ ] 精灵图集处理
- [ ] 资源预加载进度条

### 输入和交互系统
- [ ] 鼠标/触摸事件处理
- [ ] 棋盘格子点击检测
- [ ] 拖拽操作（交易界面）
- [ ] 键盘快捷键支持
- [ ] 手势识别（移动端）

### 动画系统
- [ ] 玩家移动动画（Phaser Tweens）
- [ ] 骰子滚动动画
- [ ] UI弹出动画
- [ ] 金钱数值变化动画
- [ ] 粒子效果（庆祝动画）

### 数据管理
- [ ] 游戏状态数据结构
- [ ] LocalStorage数据持久化
- [ ] 游戏配置管理
- [ ] 存档系统
- [ ] 数据验证

### 玩家系统
- [ ] 玩家数据结构（金钱、地产、位置等）
- [ ] 玩家回合管理
- [ ] 玩家行为状态机
- [ ] 破产检测和处理
- [ ] 玩家排名系统

### 地产系统
- [ ] 地产数据结构和属性
- [ ] 地产购买逻辑
- [ ] 租金计算系统
- [ ] 房屋建造系统
- [ ] 地产交易系统
- [ ] 抵押和赎回功能

### 卡片系统
- [ ] 机会卡数据和逻辑
- [ ] 命运卡数据和逻辑
- [ ] 卡片抽取和执行系统
- [ ] 特殊卡片效果（出狱卡等）

### 经济系统
- [ ] 银行资金管理
- [ ] 税收计算
- [ ] 拍卖系统
- [ ] 交易验证逻辑
- [ ] 通胀机制（可选）

## 🎲 游戏机制实现

### 骰子系统
- [ ] 随机数生成器
- [ ] 骰子动画效果
- [ ] 双数检测逻辑
- [ ] 作弊检测（在线模式）

### 监狱系统
- [ ] 入狱条件检测
- [ ] 出狱方式实现
- [ ] 监狱中的行为限制
- [ ] 出狱卡使用逻辑

### AI系统（单机模式）
- [ ] AI决策树设计
- [ ] 购买策略算法
- [ ] 交易谈判逻辑
- [ ] 建造决策系统
- [ ] 难度等级设置

### 多人游戏系统
- [ ] 网络通信协议
- [ ] 房间管理系统
- [ ] 玩家同步机制
- [ ] 断线重连功能
- [ ] 反作弊系统

## 📱 用户界面开发

### 交互界面
- [ ] 地产信息展示
- [ ] 交易提议界面
- [ ] 建造选择界面
- [ ] 拍卖参与界面
- [ ] 玩家资产总览

## 🎮 Phaser.js 特定功能

### 图形渲染
- [ ] 棋盘背景渲染
- [ ] 动态UI元素绘制
- [ ] 玩家代币精灵管理
- [ ] 房屋3D效果模拟
- [ ] 视觉特效（光晕、阴影）

### 物理系统（可选）
- [ ] 骰子物理模拟
- [ ] 碰撞检测优化
- [ ] 重力效果

### 音频集成
- [ ] 背景音乐循环播放
- [ ] 音效触发系统
- [ ] 音量控制
- [ ] 音频预加载优化

### 移动端适配
- [ ] 响应式布局设计
- [ ] 触摸操作优化
- [ ] 屏幕尺寸适配
- [ ] 性能优化（帧率控制）